AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create an S3 bucket for static website hosting with CloudFront and HTTPS

Parameters:
  DomainName:
    Description: The custom domain name for the website (e.g., example.com)
    Type: String
  HostedZoneId:
    Description: The Route 53 Hosted Zone ID for the domain
    Type: String
  WebsiteCertificate:
    Description: The ARN of the ACM certificate for the website
    Type: String

Resources:
  S3WebsiteBucketWWW:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'www.${DomainName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  S3WebsiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${DomainName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Sub 'www.${DomainName}'
          Protocol: https

  S3BucketPolicyWWW:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3WebsiteBucketWWW
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::www.${DomainName}/*'

  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${DomainName}/*'

  CloudFrontDistributionWWW:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub 'www.${DomainName}.s3-website-${AWS::Region}.amazonaws.com'
            Id: S3OriginWWW
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: ['GET', 'HEAD']
          CachedMethods: ['GET', 'HEAD']
          TargetOriginId: S3OriginWWW
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteCertificate
          SslSupportMethod: sni-only
        PriceClass: PriceClass_100

  DNSRecordWWW:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'www.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistributionWWW.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID

  CloudFrontDistributionNonWWW:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub '${DomainName}.s3-website-${AWS::Region}.amazonaws.com'
            Id: S3OriginNonWWW
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: ['GET', 'HEAD']
          CachedMethods: ['GET', 'HEAD']
          TargetOriginId: S3OriginNonWWW
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteCertificate
          SslSupportMethod: sni-only
        PriceClass: PriceClass_100

  DNSRecordNonWWW:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistributionNonWWW.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID